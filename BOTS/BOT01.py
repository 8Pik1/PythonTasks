import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.filters import Command
import asyncio

API_TOKEN = '7860779088:AAFO7Fix4bdpMhG_Pb8tgonKk3IFVy87ld0'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_start():
    # –í–º–µ—Å—Ç–æ executor.start_polling –∏—Å–ø–æ–ª—å–∑—É–µ–º start_polling()
    await dp.start_polling(bot)


FILES = {
    "bb_male_1": "./trainings/–¥–æ_1_–≥–æ–¥–∞.xlsx",
    "bb_male_2": "./trainings/1_-_3_–≥–æ–¥–∞.xlsx",
    "bb_male_3": "./trainings/–±–æ–ª–µ–µ_3_–ª–µ—Ç.xlsx",
    "pl_male_1": "./trainings/–¥–æ_1_–≥–æ–¥–∞.xlsx",
    "pl_male_2": "./trainings/1_-_3_–≥–æ–¥–∞.xlsx",
    "pl_male_3": "./trainings/–±–æ–ª–µ–µ_3_–ª–µ—Ç.xlsx",
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_data = {
    "main": {
        "text": "üí™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–µ–±—è:",
        "buttons": [
            ("ü¶ç –ü–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥", "powerlifting"),
            ("üèÜ –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥", "bodybuilding"),
        ],
    },
    "powerlifting": {
        "text": "ü¶ç –ü–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç:",
        "buttons": [
            ("üê£ –î–æ 1 –≥–æ–¥–∞", "pl_male_1"),
            ("üìà 1 - 3 –≥–æ–¥–∞", "pl_male_2"),
            ("üíÄ –ë–æ–ª–µ–µ 3 –ª–µ—Ç", "pl_male_3"),
            ("üîô –ù–∞–∑–∞–¥", "main"),
        ],
    },
    "bodybuilding": {
        "text": "üèÜ –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç:",
        "buttons": [
            ("üê£ –î–æ 1 –≥–æ–¥–∞", "bb_male_1"),
            ("üìà 1 - 3 –≥–æ–¥–∞", "bb_male_2"),
            ("üíÄ –ë–æ–ª–µ–µ 3 –ª–µ—Ç", "bb_male_3"),
            ("üîô –ù–∞–∑–∞–¥", "main"),
        ],
    },
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(menu_key):
    buttons = [types.InlineKeyboardButton(text=text, callback_data=data) for text, data in menu_data[menu_key]["buttons"]]
    return types.InlineKeyboardMarkup(row_width=2,inline_keyboard=[buttons])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(menu_data["main"]["text"], reply_markup=get_keyboard("main"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_menu(callback_query: types.CallbackQuery):
    data = callback_query.data
    print("012")
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if data == "main":
        await bot.send_message(callback_query.from_user.id, menu_data["main"]["text"], reply_markup=get_keyboard("main"))

    elif data == "powerlifting":
        await bot.send_message(callback_query.from_user.id, menu_data["powerlifting"]["text"], reply_markup=get_keyboard("powerlifting"))

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –∏–∑ "–ü–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–∞"
    elif data.startswith("pl_"):
        print("123")
        await bot.send_message(callback_query.from_user.id, menu_data["powerlifting"]["text"], reply_markup=get_keyboard("powerlifting"))

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –∏–∑ "–ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞"
    elif data.startswith("bb_"):
        await bot.send_message(callback_query.from_user.id, menu_data["bodybuilding"]["text"], reply_markup=get_keyboard("bodybuilding"))

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–ø—ã—Ç –¥–ª—è –ü–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–∞ –∏–ª–∏ –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞
    elif data in FILES:
        await bot.send_message(callback_query.from_user.id, "–í–æ—Ç –≤–∞—à —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω:")
        file_path = FILES[data]
        file = InputFile(file_path)
        await bot.send_document(callback_query.from_user.id, file)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    elif data == "main":
        await bot.send_message(callback_query.from_user.id, menu_data["main"]["text"], reply_markup=get_keyboard("main"))

    else:
        await bot.send_message(callback_query.from_user.id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + data)
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
#dp.register_message_handler(start, commands="start")

#dp.register_callback_query_handler(process_menu)


if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    asyncio.run(on_start())
